import tkinter as tk
from tkinter import messagebox
import time

# Pomodoro Timer Class
class PomodoroTimer:
    def __init__(self, root):
        self.root = root
        self.root.title("Pomodoro Timer")
        self.root.geometry("300x200")
        
        self.work_time = 25 * 60  # 25 minutes
        self.break_time = 5 * 60  # 5 minutes
        
        self.timer_running = False
        self.time_left = self.work_time
        self.is_break_time = False
        
        self.time_display = tk.Label(self.root, text="25:00", font=("Helvetica", 40))
        self.time_display.pack(pady=30)

        self.start_button = tk.Button(self.root, text="Start", command=self.start_timer, font=("Helvetica", 12))
        self.start_button.pack(side="left", padx=20)

        self.reset_button = tk.Button(self.root, text="Reset", command=self.reset_timer, font=("Helvetica", 12))
        self.reset_button.pack(side="right", padx=20)
        
    def start_timer(self):
        if not self.timer_running:
            self.timer_running = True
            self.update_timer()

    def reset_timer(self):
        self.timer_running = False
        self.time_left = self.work_time if not self.is_break_time else self.break_time
        self.update_display(self.time_left)

    def update_timer(self):
        if self.timer_running:
            if self.time_left > 0:
                self.time_left -= 1
                self.update_display(self.time_left)
                self.root.after(1000, self.update_timer)  # call update_timer every 1000ms
            else:
                if not self.is_break_time:
                    self.is_break_time = True
                    self.time_left = self.break_time
                    messagebox.showinfo("Pomodoro Complete", "Take a 5-minute break!")
                else:
                    self.is_break_time = False
                    self.time_left = self.work_time
                    messagebox.showinfo("Break Over", "Time to work again!")
                self.update_display(self.time_left)

    def update_display(self, time_left):
        minutes = time_left // 60
        seconds = time_left % 60
        time_str = f"{minutes:02}:{seconds:02}"
        self.time_display.config(text=time_str)

if __name__ == "__main__":
    root = tk.Tk()
    pomodoro_timer = PomodoroTimer(root)
    root.mainloop()
